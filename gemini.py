import google.generativeai as genai

async def generate_plan_with_gemini(goal, situation):
    """
    Generates a structured plan using the Gemini API.
    """
    try:
        # For this example, we'll use the gemini-pro model
        model = genai.GenerativeModel('gemini-pro')

        # This is the prompt we send to the AI. It's carefully crafted to ask the AI
        # to act as a coach and provide a structured response.
        prompt = f"""
        You are an expert life and productivity coach. A user has provided you with their goal and current situation.
        Your task is to generate a structured, actionable plan. Please format your response in Markdown.

        **User's Goal:**
        {goal}

        **Current Situation / Timeframe:**
        {situation}

        ---

        Please provide the following in your response, using clear headings:

        ### üéØ Long-Term Goal
        Briefly restate the user's main goal.

        ### üìà Mid-Term Milestones
        Break the long-term goal into 3-4 major, sequential milestones.

        ### üóìÔ∏è Short-Term Targets
        For the *first* milestone, create a set of smaller, weekly or bi-weekly targets.
        """

        # Generate the content
        response = await model.generate_content_async(prompt)

        # Return the generated text
        # We add a little disclaimer at the end.
        return response.text + "\n\n*Disclaimer: This plan was generated by an AI and should be used as a starting point. Adjust it to your needs!*"

    except Exception as e:
        print(f"An error occurred with the Gemini API: {e}")
        return "Sorry, I had trouble creating a plan. Please check my console for errors."

async def generate_todo_with_gemini(goal, situation):
    """
    Generates a structured to-do list using the Gemini API.
    """
    try:
        # For this example, we'll use the gemini-pro model
        model = genai.GenerativeModel('gemini-pro')

        # This is the prompt we send to the AI. It's carefully crafted to ask the AI
        # to act as a coach and provide a structured response.
        prompt = f"""
        You are an expert life and productivity coach. A user has provided you with their goal and current situation.
        Your task is to generate a structured, actionable to-do list. Please format your response in Markdown.

        **User's Goal:**
        {goal}

        **Current Situation / Timeframe:**
        {situation}

        ---

        Please provide the following in your response, using clear headings:

        ### ‚úÖ Daily To-Dos (Your First Week)
        Provide a list of actionable daily tasks for the next 7 days to start working towards the first short-term target.

        """

        # Generate the content
        response = await model.generate_content_async(prompt)

        # Return the generated text
        return response.text + "\n\n*Disclaimer: This plan was generated by an AI and should be used as a starting point. Adjust it to your needs!*"

    except Exception as e:
        print(f"An error occurred with the Gemini API: {e}")
        return "Sorry, I had trouble creating a to-do list. Please check my console for errors."


async def generate_motivator_with_gemini(goal, situation):
    """
    Generates a motivational message using the Gemini API.
    """
    try:
        # For this example, we'll use the gemini-pro model
        model = genai.GenerativeModel('gemini-pro')

        # This is the prompt we send to the AI. It's carefully crafted to ask the AI
        # to provide a motivational message.
        prompt = f"""
        You are an expert life and productivity coach. A user has provided you with their goal and current situation.
        Your task is to generate a motivational message to encourage them.

        **User's Goal:**
        {goal}

        **Current Situation / Timeframe:**
        {situation}

        ---

        Please provide a short, encouraging message that inspires the user to take action towards their goal.
        """

        # Generate the content
        response = await model.generate_content_async(prompt)

        # Return the generated text
        return response.text + "\n\n*Disclaimer: This message was generated by an AI and should be used as a source of inspiration.*"

    except Exception as e:
        print(f"An error occurred with the Gemini API: {e}")
        return "Sorry, I had trouble creating a motivational message. Please check my console for errors."